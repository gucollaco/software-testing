document.querySelector('mutation-test-report-app').report = {"files":{"/home/gustavo/Desktop/Validação e Verificação de Software/software-testing/triangle-mutation-test/triangle.js":{"language":"javascript","mutants":[{"id":"0","location":{"end":{"column":6,"line":7},"start":{"column":32,"line":3}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1","location":{"end":{"column":6,"line":15},"start":{"column":16,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"9","location":{"end":{"column":74,"line":12},"start":{"column":17,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"8","location":{"end":{"column":74,"line":12},"start":{"column":17,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3","location":{"end":{"column":26,"line":14},"start":{"column":17,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2","location":{"end":{"column":26,"line":14},"start":{"column":17,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"10","location":{"end":{"column":74,"line":12},"start":{"column":17,"line":11}},"mutatorName":"LogicalOperator","replacement":"(this.a <= 0 || this.b <= 0 || this.c <= 0) && 'invalid' && this.a === this.b && this.a === this.c && 'equilateral'","status":"Killed"},{"id":"12","location":{"end":{"column":73,"line":11},"start":{"column":17,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"11","location":{"end":{"column":73,"line":11},"start":{"column":17,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"13","location":{"end":{"column":73,"line":11},"start":{"column":17,"line":11}},"mutatorName":"LogicalOperator","replacement":"this.a <= 0 || this.b <= 0 || this.c <= 0 || 'invalid'","status":"Killed"},{"id":"5","location":{"end":{"column":93,"line":13},"start":{"column":17,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"4","location":{"end":{"column":26,"line":14},"start":{"column":17,"line":11}},"mutatorName":"LogicalOperator","replacement":"((this.a <= 0 || this.b <= 0 || this.c <= 0) && 'invalid' || this.a === this.b && this.a === this.c && 'equilateral' || (this.a === this.b || this.a === this.c || this.b === this.c) && 'isosceles') && 'scalene'","status":"Killed"},{"id":"14","location":{"end":{"column":59,"line":11},"start":{"column":18,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"16","location":{"end":{"column":59,"line":11},"start":{"column":18,"line":11}},"mutatorName":"LogicalOperator","replacement":"(this.a <= 0 || this.b <= 0) && this.c <= 0","status":"Killed"},{"id":"15","location":{"end":{"column":59,"line":11},"start":{"column":18,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"17","location":{"end":{"column":44,"line":11},"start":{"column":18,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"18","location":{"end":{"column":44,"line":11},"start":{"column":18,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"19","location":{"end":{"column":44,"line":11},"start":{"column":18,"line":11}},"mutatorName":"LogicalOperator","replacement":"this.a <= 0 && this.b <= 0","status":"Killed"},{"id":"6","location":{"end":{"column":93,"line":13},"start":{"column":17,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"21","location":{"end":{"column":29,"line":11},"start":{"column":18,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"20","location":{"end":{"column":29,"line":11},"start":{"column":18,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"7","location":{"end":{"column":93,"line":13},"start":{"column":17,"line":11}},"mutatorName":"LogicalOperator","replacement":"((this.a <= 0 || this.b <= 0 || this.c <= 0) && 'invalid' || this.a === this.b && this.a === this.c && 'equilateral') && (this.a === this.b || this.a === this.c || this.b === this.c) && 'isosceles'","status":"Killed"},{"id":"22","location":{"end":{"column":29,"line":11},"start":{"column":18,"line":11}},"mutatorName":"EqualityOperator","replacement":"this.a < 0","status":"Killed"},{"id":"24","location":{"end":{"column":44,"line":11},"start":{"column":33,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"23","location":{"end":{"column":29,"line":11},"start":{"column":18,"line":11}},"mutatorName":"EqualityOperator","replacement":"this.a > 0","status":"Killed"},{"id":"25","location":{"end":{"column":44,"line":11},"start":{"column":33,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"26","location":{"end":{"column":44,"line":11},"start":{"column":33,"line":11}},"mutatorName":"EqualityOperator","replacement":"this.b < 0","status":"Killed"},{"id":"30","location":{"end":{"column":59,"line":11},"start":{"column":48,"line":11}},"mutatorName":"EqualityOperator","replacement":"this.c < 0","status":"Killed"},{"id":"27","location":{"end":{"column":44,"line":11},"start":{"column":33,"line":11}},"mutatorName":"EqualityOperator","replacement":"this.b > 0","status":"Killed"},{"id":"28","location":{"end":{"column":59,"line":11},"start":{"column":48,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"29","location":{"end":{"column":59,"line":11},"start":{"column":48,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"32","location":{"end":{"column":73,"line":11},"start":{"column":64,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"31","location":{"end":{"column":59,"line":11},"start":{"column":48,"line":11}},"mutatorName":"EqualityOperator","replacement":"this.c > 0","status":"Killed"},{"id":"33","location":{"end":{"column":74,"line":12},"start":{"column":17,"line":12}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"34","location":{"end":{"column":74,"line":12},"start":{"column":17,"line":12}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"37","location":{"end":{"column":56,"line":12},"start":{"column":18,"line":12}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"35","location":{"end":{"column":74,"line":12},"start":{"column":17,"line":12}},"mutatorName":"LogicalOperator","replacement":"this.a === this.b && this.a === this.c || 'equilateral'","status":"Killed"},{"id":"36","location":{"end":{"column":56,"line":12},"start":{"column":18,"line":12}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"39","location":{"end":{"column":35,"line":12},"start":{"column":18,"line":12}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"38","location":{"end":{"column":56,"line":12},"start":{"column":18,"line":12}},"mutatorName":"LogicalOperator","replacement":"this.a === this.b || this.a === this.c","status":"Killed"},{"id":"40","location":{"end":{"column":35,"line":12},"start":{"column":18,"line":12}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"41","location":{"end":{"column":35,"line":12},"start":{"column":18,"line":12}},"mutatorName":"EqualityOperator","replacement":"this.a !== this.b","status":"Killed"},{"id":"42","location":{"end":{"column":56,"line":12},"start":{"column":39,"line":12}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"43","location":{"end":{"column":56,"line":12},"start":{"column":39,"line":12}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"45","location":{"end":{"column":74,"line":12},"start":{"column":61,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"44","location":{"end":{"column":56,"line":12},"start":{"column":39,"line":12}},"mutatorName":"EqualityOperator","replacement":"this.a !== this.c","status":"Killed"},{"id":"46","location":{"end":{"column":93,"line":13},"start":{"column":17,"line":13}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"49","location":{"end":{"column":77,"line":13},"start":{"column":18,"line":13}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"48","location":{"end":{"column":93,"line":13},"start":{"column":17,"line":13}},"mutatorName":"LogicalOperator","replacement":"this.a === this.b || this.a === this.c || this.b === this.c || 'isosceles'","status":"Killed"},{"id":"47","location":{"end":{"column":93,"line":13},"start":{"column":17,"line":13}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"51","location":{"end":{"column":77,"line":13},"start":{"column":18,"line":13}},"mutatorName":"LogicalOperator","replacement":"(this.a === this.b || this.a === this.c) && this.b === this.c","status":"Killed"},{"id":"50","location":{"end":{"column":77,"line":13},"start":{"column":18,"line":13}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"52","location":{"end":{"column":56,"line":13},"start":{"column":18,"line":13}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"53","location":{"end":{"column":56,"line":13},"start":{"column":18,"line":13}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"56","location":{"end":{"column":35,"line":13},"start":{"column":18,"line":13}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"54","location":{"end":{"column":56,"line":13},"start":{"column":18,"line":13}},"mutatorName":"LogicalOperator","replacement":"this.a === this.b && this.a === this.c","status":"Killed"},{"id":"55","location":{"end":{"column":35,"line":13},"start":{"column":18,"line":13}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"57","location":{"end":{"column":35,"line":13},"start":{"column":18,"line":13}},"mutatorName":"EqualityOperator","replacement":"this.a !== this.b","status":"Killed"},{"id":"59","location":{"end":{"column":56,"line":13},"start":{"column":39,"line":13}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"58","location":{"end":{"column":56,"line":13},"start":{"column":39,"line":13}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"60","location":{"end":{"column":56,"line":13},"start":{"column":39,"line":13}},"mutatorName":"EqualityOperator","replacement":"this.a !== this.c","status":"Killed"},{"id":"64","location":{"end":{"column":93,"line":13},"start":{"column":82,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"61","location":{"end":{"column":77,"line":13},"start":{"column":60,"line":13}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"63","location":{"end":{"column":77,"line":13},"start":{"column":60,"line":13}},"mutatorName":"EqualityOperator","replacement":"this.b !== this.c","status":"Killed"},{"id":"62","location":{"end":{"column":77,"line":13},"start":{"column":60,"line":13}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"65","location":{"end":{"column":26,"line":14},"start":{"column":17,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"66","location":{"end":{"column":30,"line":18},"start":{"column":18,"line":18}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"}],"source":"class triangle {\n    // sets as 0 in case no value is given\n    constructor(a=0, b=0, c=0) {\n        this.a = a\n        this.b = b\n        this.c = c\n    }\n\n    // returns the triangle type according to the sides given\n    classify() {\n        return  (this.a <= 0 || this.b <= 0 || this.c <= 0) && 'invalid' ||\n                (this.a === this.b && this.a === this.c) && 'equilateral' ||\n                (this.a === this.b || this.a === this.c || this.b === this.c) && 'isosceles' ||\n                'scalene'\n    }\n}\n\nmodule.exports = { triangle }\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null}};